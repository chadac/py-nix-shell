{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"py-nix-shell Invoke commands sourced from Nix. This is mainly intended for those who vend cli tools inside environments that often support Nix and need to be able to reproducibly invoke those tools. If folks don't have Nix, it will attempt to run the command anyways, and then provide an information install-error style message (either packages to install or a suggestion to install Nix). This is a drop-in replacement for subprocess -- so you can substitute your calls from subprocess.<method> to nix_shell.<method> . If Nix is not installed, this (by default) falls back to a non-Nix shell. Installation pip install nix-shell Usage import nix_shell # nix_shell supports existing subprocess commands # if the command name matches the `nixpkgs` name, install that by default nix_shell.run([\"curl\", \"https://google.com\", \"--insecure\"]) # you can manually specify nix packages to install nix_shell.run([\"curl\", \"https://google.com\"], packages=[\"curl\", \"openssl\"]) # use a dev environment from a flake nix_shell.run([\"curl\", \"https://google.com\"], flake=\"github:chadac/py-nix-shell#sample-curl-env\") # or, just use the `nixpkgs` version from a `flake.lock` file nix_shell.run([\"curl\", \"https://google.com\"], packages=[\"curl\", \"openssl\"], flake_lock=Path(\"./my/flake.lock\")) You can use run , check_output , Popen , call , check_call , getoutput and getstatusoutput . If you want to run a bunch of commands under the same environment, you can use the following: import nix_shell # build a shell manually nix = nix_shell.mk_shell(packages=[\"curl\"], library_path=[\"stdenv.cc.cc.lib\"]) # specify a shell.nix file to use nix = nix_shell.from_nix(\"path:/to/my/shell.nix\") # specify a flake to use nix = nix_shell.from_flake(\"path:/to/my/flake.nix#devShells.default\") nix.run([\"curl\", \"https://google.com\"]) Details Versioning nix-shell tries to keep evaluation pure in order to leverage caching capabilities when running Nix commands. As such, when running commands via from_nix for mk_shell , the nixpkgs version is determined using the flake.lock from this project. It is updated weekly.","title":"Home"},{"location":"#py-nix-shell","text":"Invoke commands sourced from Nix. This is mainly intended for those who vend cli tools inside environments that often support Nix and need to be able to reproducibly invoke those tools. If folks don't have Nix, it will attempt to run the command anyways, and then provide an information install-error style message (either packages to install or a suggestion to install Nix). This is a drop-in replacement for subprocess -- so you can substitute your calls from subprocess.<method> to nix_shell.<method> . If Nix is not installed, this (by default) falls back to a non-Nix shell.","title":"py-nix-shell"},{"location":"#installation","text":"pip install nix-shell","title":"Installation"},{"location":"#usage","text":"import nix_shell # nix_shell supports existing subprocess commands # if the command name matches the `nixpkgs` name, install that by default nix_shell.run([\"curl\", \"https://google.com\", \"--insecure\"]) # you can manually specify nix packages to install nix_shell.run([\"curl\", \"https://google.com\"], packages=[\"curl\", \"openssl\"]) # use a dev environment from a flake nix_shell.run([\"curl\", \"https://google.com\"], flake=\"github:chadac/py-nix-shell#sample-curl-env\") # or, just use the `nixpkgs` version from a `flake.lock` file nix_shell.run([\"curl\", \"https://google.com\"], packages=[\"curl\", \"openssl\"], flake_lock=Path(\"./my/flake.lock\")) You can use run , check_output , Popen , call , check_call , getoutput and getstatusoutput . If you want to run a bunch of commands under the same environment, you can use the following: import nix_shell # build a shell manually nix = nix_shell.mk_shell(packages=[\"curl\"], library_path=[\"stdenv.cc.cc.lib\"]) # specify a shell.nix file to use nix = nix_shell.from_nix(\"path:/to/my/shell.nix\") # specify a flake to use nix = nix_shell.from_flake(\"path:/to/my/flake.nix#devShells.default\") nix.run([\"curl\", \"https://google.com\"])","title":"Usage"},{"location":"#details","text":"","title":"Details"},{"location":"#versioning","text":"nix-shell tries to keep evaluation pure in order to leverage caching capabilities when running Nix commands. As such, when running commands via from_nix for mk_shell , the nixpkgs version is determined using the flake.lock from this project. It is updated weekly.","title":"Versioning"},{"location":"api/","text":"nix_shell.exceptions nix_shell.constants nix_shell.flake nix_shell.nix_subprocess nix_shell._nix Interface for invoking the Nix CLI from Python. nix_shell.builders FlakeRefParams Objects class FlakeRefParams(TypedDict) Parameters to provide for building Flake shells. from_flake def from_flake(**kwargs: Unpack[FlakeRefParams]) -> NixSubprocess Create a Nix shell from a flake. Arguments : flake : Flake reference to use for shell. nix_shell.nixlang Deserializer for Nix language constructs.","title":"API Documentation"},{"location":"api/#nix_shellexceptions","text":"","title":"nix_shell.exceptions"},{"location":"api/#nix_shellconstants","text":"","title":"nix_shell.constants"},{"location":"api/#nix_shellflake","text":"","title":"nix_shell.flake"},{"location":"api/#nix_shellnix_subprocess","text":"","title":"nix_shell.nix_subprocess"},{"location":"api/#nix_shell_nix","text":"Interface for invoking the Nix CLI from Python.","title":"nix_shell._nix"},{"location":"api/#nix_shellbuilders","text":"","title":"nix_shell.builders"},{"location":"api/#flakerefparams-objects","text":"class FlakeRefParams(TypedDict) Parameters to provide for building Flake shells.","title":"FlakeRefParams Objects"},{"location":"api/#from_flake","text":"def from_flake(**kwargs: Unpack[FlakeRefParams]) -> NixSubprocess Create a Nix shell from a flake. Arguments : flake : Flake reference to use for shell.","title":"from_flake"},{"location":"api/#nix_shellnixlang","text":"Deserializer for Nix language constructs.","title":"nix_shell.nixlang"},{"location":"getting-started/","text":"","title":"Getting Started"}]}